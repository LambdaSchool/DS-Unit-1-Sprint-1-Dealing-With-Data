{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ravenha/DS-Unit-1-Sprint-1-Dealing-With-Data/blob/master/7-9-19\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V2SJHFwqvO8e",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        },
        "outputId": "dd9fedbe-9e7f-4c2d-89f9-7b9831ed5788"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "drinks = pd.read_csv('https://raw.githubusercontent.com/fivethirtyeight/data/master/alcohol-consumption/drinks.csv')\n",
        "print(drinks.shape)\n",
        "drinks.head()"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(193, 5)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>beer_servings</th>\n",
              "      <th>spirit_servings</th>\n",
              "      <th>wine_servings</th>\n",
              "      <th>total_litres_of_pure_alcohol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Albania</td>\n",
              "      <td>89</td>\n",
              "      <td>132</td>\n",
              "      <td>54</td>\n",
              "      <td>4.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>0.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Andorra</td>\n",
              "      <td>245</td>\n",
              "      <td>138</td>\n",
              "      <td>312</td>\n",
              "      <td>12.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>217</td>\n",
              "      <td>57</td>\n",
              "      <td>45</td>\n",
              "      <td>5.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       country  beer_servings  ...  wine_servings  total_litres_of_pure_alcohol\n",
              "0  Afghanistan              0  ...              0                           0.0\n",
              "1      Albania             89  ...             54                           4.9\n",
              "2      Algeria             25  ...             14                           0.7\n",
              "3      Andorra            245  ...            312                          12.4\n",
              "4       Angola            217  ...             45                           5.9\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lw_gNXzcvi_6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "b7766756-3adf-49e7-86a8-7f81ea180efc"
      },
      "source": [
        "drinks.columns"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['country', 'beer_servings', 'spirit_servings', 'wine_servings',\n",
              "       'total_litres_of_pure_alcohol'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RAeCDDIavmuT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 343
        },
        "outputId": "440fdfad-cac7-481e-a974-98a90ed3b0ba"
      },
      "source": [
        "drinks.sort_values('beer_servings', ascending = False).head(10)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>beer_servings</th>\n",
              "      <th>spirit_servings</th>\n",
              "      <th>wine_servings</th>\n",
              "      <th>total_litres_of_pure_alcohol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>117</th>\n",
              "      <td>Namibia</td>\n",
              "      <td>376</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>361</td>\n",
              "      <td>170</td>\n",
              "      <td>134</td>\n",
              "      <td>11.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>Gabon</td>\n",
              "      <td>347</td>\n",
              "      <td>98</td>\n",
              "      <td>59</td>\n",
              "      <td>8.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>Germany</td>\n",
              "      <td>346</td>\n",
              "      <td>117</td>\n",
              "      <td>175</td>\n",
              "      <td>11.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>Lithuania</td>\n",
              "      <td>343</td>\n",
              "      <td>244</td>\n",
              "      <td>56</td>\n",
              "      <td>12.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135</th>\n",
              "      <td>Poland</td>\n",
              "      <td>343</td>\n",
              "      <td>215</td>\n",
              "      <td>56</td>\n",
              "      <td>10.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>Venezuela</td>\n",
              "      <td>333</td>\n",
              "      <td>100</td>\n",
              "      <td>3</td>\n",
              "      <td>7.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>81</th>\n",
              "      <td>Ireland</td>\n",
              "      <td>313</td>\n",
              "      <td>118</td>\n",
              "      <td>165</td>\n",
              "      <td>11.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>Palau</td>\n",
              "      <td>306</td>\n",
              "      <td>63</td>\n",
              "      <td>23</td>\n",
              "      <td>6.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>Romania</td>\n",
              "      <td>297</td>\n",
              "      <td>122</td>\n",
              "      <td>167</td>\n",
              "      <td>10.4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            country  beer_servings  ...  wine_servings  total_litres_of_pure_alcohol\n",
              "117         Namibia            376  ...              1                           6.8\n",
              "45   Czech Republic            361  ...            134                          11.8\n",
              "62            Gabon            347  ...             59                           8.9\n",
              "65          Germany            346  ...            175                          11.3\n",
              "98        Lithuania            343  ...             56                          12.9\n",
              "135          Poland            343  ...             56                          10.9\n",
              "188       Venezuela            333  ...              3                           7.7\n",
              "81          Ireland            313  ...            165                          11.4\n",
              "129           Palau            306  ...             23                           6.9\n",
              "140         Romania            297  ...            167                          10.4\n",
              "\n",
              "[10 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hKEwX9_MwK2m",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "ff85328d-3974-4cd8-9e4a-a04a3716edec"
      },
      "source": [
        "!ls sample_data"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "anscombe.json\t\t      mnist_test.csv\n",
            "california_housing_test.csv   mnist_train_small.csv\n",
            "california_housing_train.csv  README.md\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rtr8zUrUx9Rx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "8ed873dd-4996-4953-f259-142032b41f0b"
      },
      "source": [
        "!wget https://raw.githubusercontent.com/fivethirtyeight/data/master/alcohol-consumption/drinks.csv"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2019-07-10 03:44:53--  https://raw.githubusercontent.com/fivethirtyeight/data/master/alcohol-consumption/drinks.csv\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 4384 (4.3K) [text/plain]\n",
            "Saving to: ‘drinks.csv.2’\n",
            "\n",
            "\rdrinks.csv.2          0%[                    ]       0  --.-KB/s               \rdrinks.csv.2        100%[===================>]   4.28K  --.-KB/s    in 0s      \n",
            "\n",
            "2019-07-10 03:44:53 (77.9 MB/s) - ‘drinks.csv.2’ saved [4384/4384]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kqf2TNUXyH0n",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5c7a8f59-1d68-4886-9c28-edaa68102f6c"
      },
      "source": [
        "drinks2 = pd.read_csv('drinks.csv')\n",
        "print(drinks2.shape)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(193, 5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ckVFLFHeyXNp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "outputId": "800b0543-9e95-4bd1-e1d4-9fa15fd22d45"
      },
      "source": [
        "drinks['drinks_alcohol'] = drinks['total_litres_of_pure_alcohol'] > 0\n",
        "drinks.head()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>beer_servings</th>\n",
              "      <th>spirit_servings</th>\n",
              "      <th>wine_servings</th>\n",
              "      <th>total_litres_of_pure_alcohol</th>\n",
              "      <th>drinks_alcohol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Albania</td>\n",
              "      <td>89</td>\n",
              "      <td>132</td>\n",
              "      <td>54</td>\n",
              "      <td>4.9</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>0.7</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Andorra</td>\n",
              "      <td>245</td>\n",
              "      <td>138</td>\n",
              "      <td>312</td>\n",
              "      <td>12.4</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>217</td>\n",
              "      <td>57</td>\n",
              "      <td>45</td>\n",
              "      <td>5.9</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       country  beer_servings  ...  total_litres_of_pure_alcohol  drinks_alcohol\n",
              "0  Afghanistan              0  ...                           0.0           False\n",
              "1      Albania             89  ...                           4.9            True\n",
              "2      Algeria             25  ...                           0.7            True\n",
              "3      Andorra            245  ...                          12.4            True\n",
              "4       Angola            217  ...                           5.9            True\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-w9gByh-170_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        },
        "outputId": "a3f003fd-9edc-47e3-d960-f3f09a3d704d"
      },
      "source": [
        "countries = pd.read_csv('https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv')\n",
        "print(countries.shape)\n",
        "countries.head()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(249, 11)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>alpha-2</th>\n",
              "      <th>alpha-3</th>\n",
              "      <th>country-code</th>\n",
              "      <th>iso_3166-2</th>\n",
              "      <th>region</th>\n",
              "      <th>sub-region</th>\n",
              "      <th>intermediate-region</th>\n",
              "      <th>region-code</th>\n",
              "      <th>sub-region-code</th>\n",
              "      <th>intermediate-region-code</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AF</td>\n",
              "      <td>AFG</td>\n",
              "      <td>4</td>\n",
              "      <td>ISO 3166-2:AF</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Southern Asia</td>\n",
              "      <td>NaN</td>\n",
              "      <td>142.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Åland Islands</td>\n",
              "      <td>AX</td>\n",
              "      <td>ALA</td>\n",
              "      <td>248</td>\n",
              "      <td>ISO 3166-2:AX</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Northern Europe</td>\n",
              "      <td>NaN</td>\n",
              "      <td>150.0</td>\n",
              "      <td>154.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Albania</td>\n",
              "      <td>AL</td>\n",
              "      <td>ALB</td>\n",
              "      <td>8</td>\n",
              "      <td>ISO 3166-2:AL</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Southern Europe</td>\n",
              "      <td>NaN</td>\n",
              "      <td>150.0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>DZ</td>\n",
              "      <td>DZA</td>\n",
              "      <td>12</td>\n",
              "      <td>ISO 3166-2:DZ</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Northern Africa</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>American Samoa</td>\n",
              "      <td>AS</td>\n",
              "      <td>ASM</td>\n",
              "      <td>16</td>\n",
              "      <td>ISO 3166-2:AS</td>\n",
              "      <td>Oceania</td>\n",
              "      <td>Polynesia</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             name alpha-2  ... sub-region-code  intermediate-region-code\n",
              "0     Afghanistan      AF  ...            34.0                       NaN\n",
              "1   Åland Islands      AX  ...           154.0                       NaN\n",
              "2         Albania      AL  ...            39.0                       NaN\n",
              "3         Algeria      DZ  ...            15.0                       NaN\n",
              "4  American Samoa      AS  ...            61.0                       NaN\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pA3NHqJ23-4b",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "outputId": "a22000b7-dc6f-4716-f93c-a4ac38d8e4e2"
      },
      "source": [
        "countries[['name', 'region', 'sub-region']].head()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>region</th>\n",
              "      <th>sub-region</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Southern Asia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Åland Islands</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Northern Europe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Albania</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Southern Europe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Northern Africa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>American Samoa</td>\n",
              "      <td>Oceania</td>\n",
              "      <td>Polynesia</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             name   region       sub-region\n",
              "0     Afghanistan     Asia    Southern Asia\n",
              "1   Åland Islands   Europe  Northern Europe\n",
              "2         Albania   Europe  Southern Europe\n",
              "3         Algeria   Africa  Northern Africa\n",
              "4  American Samoa  Oceania        Polynesia"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7THiEN5J5039",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 639
        },
        "outputId": "5396ab85-5cd4-4ae7-eea9-017ffc35736e"
      },
      "source": [
        "df = drinks.join(countries[['name', 'region', 'sub-region']], how = 'left')\n",
        "df.head(20)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>beer_servings</th>\n",
              "      <th>spirit_servings</th>\n",
              "      <th>wine_servings</th>\n",
              "      <th>total_litres_of_pure_alcohol</th>\n",
              "      <th>drinks_alcohol</th>\n",
              "      <th>name</th>\n",
              "      <th>region</th>\n",
              "      <th>sub-region</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>False</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Southern Asia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Albania</td>\n",
              "      <td>89</td>\n",
              "      <td>132</td>\n",
              "      <td>54</td>\n",
              "      <td>4.9</td>\n",
              "      <td>True</td>\n",
              "      <td>Åland Islands</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Northern Europe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>0.7</td>\n",
              "      <td>True</td>\n",
              "      <td>Albania</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Southern Europe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Andorra</td>\n",
              "      <td>245</td>\n",
              "      <td>138</td>\n",
              "      <td>312</td>\n",
              "      <td>12.4</td>\n",
              "      <td>True</td>\n",
              "      <td>Algeria</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Northern Africa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>217</td>\n",
              "      <td>57</td>\n",
              "      <td>45</td>\n",
              "      <td>5.9</td>\n",
              "      <td>True</td>\n",
              "      <td>American Samoa</td>\n",
              "      <td>Oceania</td>\n",
              "      <td>Polynesia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Antigua &amp; Barbuda</td>\n",
              "      <td>102</td>\n",
              "      <td>128</td>\n",
              "      <td>45</td>\n",
              "      <td>4.9</td>\n",
              "      <td>True</td>\n",
              "      <td>Andorra</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Southern Europe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>193</td>\n",
              "      <td>25</td>\n",
              "      <td>221</td>\n",
              "      <td>8.3</td>\n",
              "      <td>True</td>\n",
              "      <td>Angola</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Armenia</td>\n",
              "      <td>21</td>\n",
              "      <td>179</td>\n",
              "      <td>11</td>\n",
              "      <td>3.8</td>\n",
              "      <td>True</td>\n",
              "      <td>Anguilla</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Latin America and the Caribbean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Australia</td>\n",
              "      <td>261</td>\n",
              "      <td>72</td>\n",
              "      <td>212</td>\n",
              "      <td>10.4</td>\n",
              "      <td>True</td>\n",
              "      <td>Antarctica</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Austria</td>\n",
              "      <td>279</td>\n",
              "      <td>75</td>\n",
              "      <td>191</td>\n",
              "      <td>9.7</td>\n",
              "      <td>True</td>\n",
              "      <td>Antigua and Barbuda</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Latin America and the Caribbean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Azerbaijan</td>\n",
              "      <td>21</td>\n",
              "      <td>46</td>\n",
              "      <td>5</td>\n",
              "      <td>1.3</td>\n",
              "      <td>True</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Latin America and the Caribbean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Bahamas</td>\n",
              "      <td>122</td>\n",
              "      <td>176</td>\n",
              "      <td>51</td>\n",
              "      <td>6.3</td>\n",
              "      <td>True</td>\n",
              "      <td>Armenia</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Western Asia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Bahrain</td>\n",
              "      <td>42</td>\n",
              "      <td>63</td>\n",
              "      <td>7</td>\n",
              "      <td>2.0</td>\n",
              "      <td>True</td>\n",
              "      <td>Aruba</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Latin America and the Caribbean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Bangladesh</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>False</td>\n",
              "      <td>Australia</td>\n",
              "      <td>Oceania</td>\n",
              "      <td>Australia and New Zealand</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Barbados</td>\n",
              "      <td>143</td>\n",
              "      <td>173</td>\n",
              "      <td>36</td>\n",
              "      <td>6.3</td>\n",
              "      <td>True</td>\n",
              "      <td>Austria</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Western Europe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Belarus</td>\n",
              "      <td>142</td>\n",
              "      <td>373</td>\n",
              "      <td>42</td>\n",
              "      <td>14.4</td>\n",
              "      <td>True</td>\n",
              "      <td>Azerbaijan</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Western Asia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>295</td>\n",
              "      <td>84</td>\n",
              "      <td>212</td>\n",
              "      <td>10.5</td>\n",
              "      <td>True</td>\n",
              "      <td>Bahamas</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Latin America and the Caribbean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Belize</td>\n",
              "      <td>263</td>\n",
              "      <td>114</td>\n",
              "      <td>8</td>\n",
              "      <td>6.8</td>\n",
              "      <td>True</td>\n",
              "      <td>Bahrain</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Western Asia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Benin</td>\n",
              "      <td>34</td>\n",
              "      <td>4</td>\n",
              "      <td>13</td>\n",
              "      <td>1.1</td>\n",
              "      <td>True</td>\n",
              "      <td>Bangladesh</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Southern Asia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Bhutan</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>True</td>\n",
              "      <td>Barbados</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Latin America and the Caribbean</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              country  beer_servings  ...    region                       sub-region\n",
              "0         Afghanistan              0  ...      Asia                    Southern Asia\n",
              "1             Albania             89  ...    Europe                  Northern Europe\n",
              "2             Algeria             25  ...    Europe                  Southern Europe\n",
              "3             Andorra            245  ...    Africa                  Northern Africa\n",
              "4              Angola            217  ...   Oceania                        Polynesia\n",
              "5   Antigua & Barbuda            102  ...    Europe                  Southern Europe\n",
              "6           Argentina            193  ...    Africa               Sub-Saharan Africa\n",
              "7             Armenia             21  ...  Americas  Latin America and the Caribbean\n",
              "8           Australia            261  ...       NaN                              NaN\n",
              "9             Austria            279  ...  Americas  Latin America and the Caribbean\n",
              "10         Azerbaijan             21  ...  Americas  Latin America and the Caribbean\n",
              "11            Bahamas            122  ...      Asia                     Western Asia\n",
              "12            Bahrain             42  ...  Americas  Latin America and the Caribbean\n",
              "13         Bangladesh              0  ...   Oceania        Australia and New Zealand\n",
              "14           Barbados            143  ...    Europe                   Western Europe\n",
              "15            Belarus            142  ...      Asia                     Western Asia\n",
              "16            Belgium            295  ...  Americas  Latin America and the Caribbean\n",
              "17             Belize            263  ...      Asia                     Western Asia\n",
              "18              Benin             34  ...      Asia                    Southern Asia\n",
              "19             Bhutan             23  ...  Americas  Latin America and the Caribbean\n",
              "\n",
              "[20 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6GB9UiD-6R-o",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 343
        },
        "outputId": "b8ab0e48-1150-477a-bae1-7a215318be6e"
      },
      "source": [
        "df =pd.merge(drinks, countries[['name', 'region', 'sub-region']], how = 'left', left_on = 'country', right_on = 'name')\n",
        "df.head(10)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>beer_servings</th>\n",
              "      <th>spirit_servings</th>\n",
              "      <th>wine_servings</th>\n",
              "      <th>total_litres_of_pure_alcohol</th>\n",
              "      <th>drinks_alcohol</th>\n",
              "      <th>name</th>\n",
              "      <th>region</th>\n",
              "      <th>sub-region</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>False</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Southern Asia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Albania</td>\n",
              "      <td>89</td>\n",
              "      <td>132</td>\n",
              "      <td>54</td>\n",
              "      <td>4.9</td>\n",
              "      <td>True</td>\n",
              "      <td>Albania</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Southern Europe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>0.7</td>\n",
              "      <td>True</td>\n",
              "      <td>Algeria</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Northern Africa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Andorra</td>\n",
              "      <td>245</td>\n",
              "      <td>138</td>\n",
              "      <td>312</td>\n",
              "      <td>12.4</td>\n",
              "      <td>True</td>\n",
              "      <td>Andorra</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Southern Europe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>217</td>\n",
              "      <td>57</td>\n",
              "      <td>45</td>\n",
              "      <td>5.9</td>\n",
              "      <td>True</td>\n",
              "      <td>Angola</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Antigua &amp; Barbuda</td>\n",
              "      <td>102</td>\n",
              "      <td>128</td>\n",
              "      <td>45</td>\n",
              "      <td>4.9</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>193</td>\n",
              "      <td>25</td>\n",
              "      <td>221</td>\n",
              "      <td>8.3</td>\n",
              "      <td>True</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>Americas</td>\n",
              "      <td>Latin America and the Caribbean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Armenia</td>\n",
              "      <td>21</td>\n",
              "      <td>179</td>\n",
              "      <td>11</td>\n",
              "      <td>3.8</td>\n",
              "      <td>True</td>\n",
              "      <td>Armenia</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Western Asia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Australia</td>\n",
              "      <td>261</td>\n",
              "      <td>72</td>\n",
              "      <td>212</td>\n",
              "      <td>10.4</td>\n",
              "      <td>True</td>\n",
              "      <td>Australia</td>\n",
              "      <td>Oceania</td>\n",
              "      <td>Australia and New Zealand</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Austria</td>\n",
              "      <td>279</td>\n",
              "      <td>75</td>\n",
              "      <td>191</td>\n",
              "      <td>9.7</td>\n",
              "      <td>True</td>\n",
              "      <td>Austria</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Western Europe</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             country  beer_servings  ...    region                       sub-region\n",
              "0        Afghanistan              0  ...      Asia                    Southern Asia\n",
              "1            Albania             89  ...    Europe                  Southern Europe\n",
              "2            Algeria             25  ...    Africa                  Northern Africa\n",
              "3            Andorra            245  ...    Europe                  Southern Europe\n",
              "4             Angola            217  ...    Africa               Sub-Saharan Africa\n",
              "5  Antigua & Barbuda            102  ...       NaN                              NaN\n",
              "6          Argentina            193  ...  Americas  Latin America and the Caribbean\n",
              "7            Armenia             21  ...      Asia                     Western Asia\n",
              "8          Australia            261  ...   Oceania        Australia and New Zealand\n",
              "9            Austria            279  ...    Europe                   Western Europe\n",
              "\n",
              "[10 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jk5xMxw47rru",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "outputId": "37362229-6b95-48d9-e117-fd3e2957fcc3"
      },
      "source": [
        "df.isnull().sum()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "country                          0\n",
              "beer_servings                    0\n",
              "spirit_servings                  0\n",
              "wine_servings                    0\n",
              "total_litres_of_pure_alcohol     0\n",
              "drinks_alcohol                   0\n",
              "name                            26\n",
              "region                          26\n",
              "sub-region                      26\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e5YVhe2h-J-Y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "drinks.at[184, 'country'] = 'United States of America'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xzoz3CHB-U9j",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        },
        "outputId": "2b9f1d1e-4350-40fd-8a52-eaac225ec348"
      },
      "source": [
        "drinks.iloc[184]"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "country                         United States of America\n",
              "beer_servings                                        249\n",
              "spirit_servings                                      158\n",
              "wine_servings                                         84\n",
              "total_litres_of_pure_alcohol                         8.7\n",
              "drinks_alcohol                                      True\n",
              "Name: 184, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t2Jxf2do_fBD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        },
        "outputId": "78a8054b-a656-43d5-9cb8-c88ae5a5a8df"
      },
      "source": [
        "df.groupby('sub-region').beer_servings.mean().plot(kind = 'bar');"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAGlCAYAAAD0yD1qAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3XmYZEWV/vHvS4siO0iLyg42KCCb\nDbI5iggqqIgruA6ijA4quI6MC6g4griCP1EcRHABYQRBcQERWWVpmqbZFQWUHVEEQVma9/dHRFJZ\n2VVdlfdGdt66dT7Pk09V3qo8FZVZFXlvxIkTsk0IIYT2WmLYDQghhDBY0dGHEELLRUcfQggtFx19\nCCG0XHT0IYTQctHRhxBCy0VHH0IILRcdfQghtFx09CGE0HJPGHYDAFZZZRWvvfbaw25GCCFMKZdd\ndtlfbM+c6Psa0dGvvfbazJkzZ9jNCCGEKUXSzZP5vhi6CSGElpuwo5e0hqSzJV0j6WpJ++XjB0m6\nVdK8fNul6zEHSLpB0vWSXjLIXyCEEMKiTWbo5lHgg7bnSloOuEzSmflrX7b9he5vlrQhsAewEfAM\n4FeS1re9oGTDQwghTM6EZ/S2b7c9N39+P3AtsNoiHrIbcILth2zfCNwAbFWisSGEEPrX1xi9pLWB\nzYGL86H3SJov6duSVsrHVgP+3PWwWxjjjUHSPpLmSJpz9913993wEEIIkzPpjl7SssCPgP1t3wcc\nCawHbAbcDnyxnx9s+yjbs23PnjlzwuygEEIIFU2qo5e0JKmT/77tkwFs32l7ge3HgG8xMjxzK7BG\n18NXz8dCCCEMwWSybgQcDVxr+0tdx5/e9W27A1flz08D9pD0JEnrALOAS8o1OYQQQj8mk3WzHfAW\n4EpJ8/Kx/wb2lLQZYOAm4D8AbF8t6UTgGlLGzr6RcRNCCMMzYUdv+3xAY3zpZ4t4zGeBz9ZoVwhT\n3tofPX1S33fTIbsOuCVhuouVsSGE0HLR0YcQQstFRx9CCC3XiOqVITRFjKuHNooz+hBCaLk4o2+A\nOIsMIQxSnNGHEELLRUcfQggtFx19CCG0XHT0IYTQco2djI0JyhBCKCPO6EMIoeWiow8hhJaLjj6E\nEFouOvoQQmi56OhDCKHloqMPIYSWi44+hBBaLjr6EEJouejoQwih5aKjDyGElouOPoQQWi46+hBC\naLno6EMIoeUaW70yhBCmg8VRqTfO6EMIoeWiow8hhJaLjj6EEFouOvoQQmi56OhDCKHloqMPIYSW\ni44+hBBaLjr6EEJouQk7eklrSDpb0jWSrpa0Xz6+sqQzJf0+f1wpH5ekwyXdIGm+pC0G/UuEEEIY\n32TO6B8FPmh7Q2BrYF9JGwIfBc6yPQs4K98HeBkwK9/2AY4s3uoQQgiTNmFHb/t223Pz5/cD1wKr\nAbsBx+ZvOxZ4Vf58N+A4JxcBK0p6evGWhxBCmJS+xuglrQ1sDlwMrGr79vylO4BV8+erAX/uetgt\n+VgIIYQhmHRHL2lZ4EfA/rbv6/6abQPu5wdL2kfSHElz7r777n4eGkIIoQ+T6uglLUnq5L9v++R8\n+M7OkEz+eFc+fiuwRtfDV8/HRrF9lO3ZtmfPnDmzavtDCCFMYDJZNwKOBq61/aWuL50GvC1//jbg\n1K7jb83ZN1sDf+8a4gkhhLCYTaYe/XbAW4ArJc3Lx/4bOAQ4UdLewM3A6/PXfgbsAtwAPAjsVbTF\nIYQQ+jJhR2/7fEDjfHnHMb7fwL412xVCCKGQWBkbQggtFx19CCG0XHT0IYTQctHRhxBCy0VHH0II\nLRcdfQghtFx09CGE0HLR0YcQQstFRx9CCC0XHX0IIbRcdPQhhNBy0dGHEELLRUcfQggtFx19CCG0\nXHT0IYTQctHRhxBCy0VHH0IILRcdfQghtFx09CGE0HLR0YcQQstFRx9CCC0XHX0IIbRcdPQhhNBy\nTxh2A0IIodfaHz19Ut930yG7Drgl7RBn9CGE0HLR0YcQQstFRx9CCC0XHX0IIbRcdPQhhNBy0dGH\nEELLRUcfQggtFx19CCG0XHT0IYTQchN29JK+LekuSVd1HTtI0q2S5uXbLl1fO0DSDZKul/SSQTU8\nhBDC5EzmjP47wEvHOP5l25vl288AJG0I7AFslB/zdUkzSjU2hBBC/ybs6G2fC/x1kvF2A06w/ZDt\nG4EbgK1qtC+EEEJNdcbo3yNpfh7aWSkfWw34c9f33JKPhRBCGJKqHf2RwHrAZsDtwBf7DSBpH0lz\nJM25++67KzYjhBDCRCp19LbvtL3A9mPAtxgZnrkVWKPrW1fPx8aKcZTt2bZnz5w5s0ozQgghTEKl\njl7S07vu7g50MnJOA/aQ9CRJ6wCzgEvqNTGEEEIdE248Iul44IXAKpJuAQ4EXihpM8DATcB/ANi+\nWtKJwDXAo8C+thcMpukhhBAmY8KO3vaeYxw+ehHf/1ngs3UaFUIIoZxYGRtCCC0XHX0IIbRcbA7e\nQrGxcgihW5zRhxBCy0VHH0IILRcdfQghtFx09CGE0HLR0YcQQstFRx9CCC0XHX0IIbRcdPQhhNBy\n0dGHEELLRUcfQggtFx19CCG0XHT0IYTQctHRhxBCy0VHH0IILRcdfQghtFx09CGE0HLR0YcQQstF\nRx9CCC0XHX0IIbRcdPQhhNBy0dGHEELLRUcfQggtFx19CCG0XHT0IYTQctHRhxBCy0VHH0IILRcd\nfQghtFx09CGE0HLR0YcQQstFRx9CCC0XHX0IIbTchB29pG9LukvSVV3HVpZ0pqTf548r5eOSdLik\nGyTNl7TFIBsfQghhYpM5o/8O8NKeYx8FzrI9Czgr3wd4GTAr3/YBjizTzBBCCFVN2NHbPhf4a8/h\n3YBj8+fHAq/qOn6ck4uAFSU9vVRjQwgh9K/qGP2qtm/Pn98BrJo/Xw34c9f33ZKPLUTSPpLmSJpz\n9913V2xGCCGEidSejLVtwBUed5Tt2bZnz5w5s24zQgghjKNqR39nZ0gmf7wrH78VWKPr+1bPx0II\nIQxJ1Y7+NOBt+fO3Aad2HX9rzr7ZGvh71xBPCCGEIXjCRN8g6XjghcAqkm4BDgQOAU6UtDdwM/D6\n/O0/A3YBbgAeBPYaQJtDCCH0YcKO3vae43xpxzG+18C+dRsV2mvtj54+qe+76ZBdB9ySEKaPWBkb\nQggtFx19CCG0XHT0IYTQctHRhxBCy0VHH0IILRcdfQghtFx09CGE0HLR0YcQQstFRx9CCC0XHX0I\nIbRcdPQhhNBy0dGHEELLRUcfQggtN2H1yjC2yVRhjAqMIYQmiDP6EEJouejoQwih5aKjDyGElouO\nPoQQWi46+hBCaLno6EMIoeUivTKE0HrTfVP6OKMPIYSWizP6EKaI6X5WGqqLM/oQQmi56OhDCKHl\noqMPIYSWi44+hBBaLjr6EEJouejoQwih5aKjDyGElouOPoQQWi46+hBCaLno6EMIoeVqlUCQdBNw\nP7AAeNT2bEkrAz8E1gZuAl5v+2/1mhlCCKGqEmf0O9jezPbsfP+jwFm2ZwFn5fshhBCGZBBDN7sB\nx+bPjwVeNYCfEUIIYZLqdvQGzpB0maR98rFVbd+eP78DWLXmzwghhFBD3TLF29u+VdJTgTMlXdf9\nRduW5LEemN8Y9gFYc801azYjDNJkyuNGadwQmqvWGb3tW/PHu4BTgK2AOyU9HSB/vGucxx5le7bt\n2TNnzqzTjBBCCItQuaOXtIyk5TqfAzsDVwGnAW/L3/Y24NS6jQwhhFBdnaGbVYFTJHXi/MD2LyRd\nCpwoaW/gZuD19ZsZQgihqsodve0/ApuOcfweYMc6jQohhFBOrIwNIYSWi44+hBBaLjr6EEJoubp5\n9FPGZHLBIfLBQwjtM206+hDCaHHyM33E0E0IIbRcdPQhhNBy0dGHEELLRUcfQggtF5OxIYTQp6lW\n0TXO6EMIoeWiow8hhJaLjj6EEFouOvoQQmi56OhDCKHloqMPIYSWi44+hBBaLjr6EEJouejoQwih\n5aKjDyGElouOPoQQWi46+hBCaLno6EMIoeWiemWY0mI7vBAmFmf0IYTQctHRhxBCy0VHH0IILRcd\nfQghtFx09CGE0HLR0YcQQstFRx9CCC0XefQhhNpiPUOzxRl9CCG03MA6ekkvlXS9pBskfXRQPyeE\nEMKiDaSjlzQD+H/Ay4ANgT0lbTiInxVCCGHRBnVGvxVwg+0/2n4YOAHYbUA/K4QQwiIMqqNfDfhz\n1/1b8rEQQgiLmWyXDyq9Fnip7Xfk+28Bnmf7PV3fsw+wT767AXD9JEKvAvylYFNLxmty25oer8lt\nKx2vyW0rHa/JbSsdb1htW8v2zIm+aVDplbcCa3TdXz0fe5zto4Cj+gkqaY7t2fWbVz5ek9vW9HhN\nblvpeE1uW+l4TW5b6XhNbhsMbujmUmCWpHUkPRHYAzhtQD8rhBDCIgzkjN72o5LeA/wSmAF82/bV\ng/hZIYQQFm1gK2Nt/wz4WeGwfQ31LOZ4TW5b0+M1uW2l4zW5baXjNbltpeM1uW2DmYwNIYTQHFEC\nIYQQWi46+hBCaLmoXhnCgEl6MrCm7cmsFQldSj93kjYmlWVZqnPM9nE14j21J9afasTaHphl+xhJ\nM4Flbd9YNd6o2E0co5f0gUV93faXKsadCfwXC7/QL6oYb1dgo55Yn64Ya1Xgf4Bn2H5Zrg20je2j\nK8Z7NXAo8FRA+Wbby1eJ12SSZgGfY+HXdd2K8bYGjgCeDTyRlDn2QJXnTtIrgC8AT7S9jqTNgE/b\nfmWVtpVW8rkbwOtQ9LmTdCDwwty+n5FqcZ1v+7UVYr0S+CLwDOAuYC3gWtsb1WjbbGAD2+tLegZw\nku3tqsTr1dShm+XybTbwblL5hNWAdwFb1Ij7feBaYB3gU8BNpJz/vkn6BvAG4L2kTvR1pBe7qu+Q\n0lGfke//Dti/RrzPA6+0vYLt5W0vV7eTl7SUpH0lfV3Stzu3irG2lnSppH9IeljSAkn3VWzaMcCR\nwKPADsBxwPcqxgL4GrAn8HvgycA7SEX6qjiIVPvpXgDb80h/f5WVfB0o+9yVfh0Oouxz91pgR+AO\n23sBmwIrVIz1GWBr4He218lxL6rRtt2BVwIPANi+jdQHFtHIjt72p2x/irSidgvbH7T9QeC5wJo1\nQj8lnyE/Yvsc228HKp3NA9vafivwt9zWbYD1a7RtFdsnAo9BWosALKgR707b19Z4/Fi+CzwNeAlw\nDun1ub9irJKd6ZNtn0W6Qr3Z9kFArR0ubN8AzLC9wPYxwEsrhnrE9t97w9dpG2Vfh5LPXenXofRz\n90/bjwGPSlqedCa+xgSPWVTb7gGWkLSE7bNJJ6ZVPew0vGIAScvUiLWQpo/Rrwo83HX/4Xysqkfy\nx9vzsMttwMoVY/0zf3wwX2bdAzy9RtsekPQURl7orYHeP/J+zJH0Q+DHwEOdg7ZPrhHzmbZfJ2k3\n28dK+gFwXtVgtm+QNMP2AuAYSZcDB1QI9ZCkJYDf54V6twLLVm0X6TV9IjBP0ueB26l+UnS1pDcC\nM/LQxvuAC2u0Dcq+DiWfu9KvQ+nnbo6kFYFvAZcB/wB+WzHWvZKWBc4Fvi/pLvLZeEUnSvomsKKk\ndwJvz+0soukd/XHAJZJOyfdfBRxbI97BklYAPkgag10eeH/FWD/NfzSHAXNJHfT/1mjbB0hlItaT\ndAEwk3SpWdXywIPAzl3HDNTp6DtvlPfmSa07SHMAVZTsTPcDliZ1BJ8hDRu8rWIsgLfktryH9Pex\nBvCairHeC3yM9GZ7PGl47jM12gZlX4fe5+5FVH/uSsaCws+d7f/Mn35D0i+A5W3PrxhuN+BfpL+P\nN5GGgCrNz+W2fUHSTsB9pJGBT9o+s2q8Xo2cjO0m6bnA9vnuubYvH2Z7xiLpScBSY1xm9hvnCaRK\nngKut/3IBA9ZrCS9A/gRsAlpPHZZ0h/kNyrEWot06bwk6Z9lBeDrechkqPJlc+cyv7ORzpNsP1gj\n5vKkyfCqQyzdsYq9DlNBqedO0u7Arzv/p/lE7YW2f1ygmbVJehppTsLApbbvKBZ7CnT0M0jDNY9f\nffSbwiTpI7Y/L+kIxhjjs/2+PmK9yPavc1bLQqoOjUhaCvhP0puaSZfi37D9rxrx9mbhrKC3V4nX\nZJLOBF5n+958fyXgBNsvqRjvIuDFtv+R7y8LnGF72wqxtgS+zcjE2t+Bt9u+rErbSpH0Fdv7S/oJ\nY/9PTDqzpWSsnrhFnztJ82xv1nPsctub9xHjfNvbS7qf0b9rray2/Ob9SeDXOdYLSBlGVSfZR2n0\n0I2k9wIHAneSJiZFenI36TNUZ1JyToFmvYD0YrxijK/VGRo5jjShdkS+/0bSpNvrKsb7LnAdacLu\n06TLy0qTs5LebPt746W99pPuKulE26+XdCVjdwr9vraQJrLv7Yrxt5zfXNVSnU4+x/uHpKUrxjoa\n+E/b58HjudLH0P/fcNHXgfT3ASl9sa6SsboVe+6ysYYG++oDbW+fPxbLiMk+DGyeJ3jJ83UXkt7o\namt0R08a89ug88tXZfsn+ePj4/t50mhZ232l9Nk+MH/cq06bxrCx7e59dc+WdE2NeCUn7DoZACX+\nuPfLH19eIFbHY5LW7Fzp5WGhOpeqD0jawvbcHO+5jEy+92tBp6MCsH2+pEcrxir2OnTOim2f0zmW\nr4TW6HfcumSsHiWfO0iTsV9iJLtrX9KkbN8krQfcYvshSS8kvfkc133C0ad7GJ05dX8+VkSjh24k\nnQ3slFMNS8T7ASkXfwEpf3554Ku2D6sQaz/S2cX9pNnxLYCP2j6jYtu+B3zN9kX5/vOAfXMKZ5V4\nl9jeStK5pCGhO4BLXHHxSmnd4+CS1geeBfy8yryEpJeSqv2dQ7rqez6wj+1fVmzblqR9jm/L8Z4G\nvKHKkIGkr5DSR48nvfm8gTSJ9z2AzpvJsEj6DSl/+wmkTu8u4ALbi1y0OOhYOV7R5y7/zX0CeHE+\ndCZwsO2+s2UkzSOlU65NWnx1KrCR7V36jZXjHQc8J8cxabJ3fr5VXiT6ePyGd/RHkyYnT2d0imDV\nlbHzbG8m6U3kjhm4rMpwgaQrbG8q6SWkN4+PA9+1XWlBl6RrSb9rZ/5hTdL2io+Sxv76auMgJuxy\ndszBpLPbX+TY77fd96IYSZeROuSVgAtIb7wP235TxbatQlrAAnCR7VrbuklakvR6QI2J8XyyMh67\nwqrswq/D5bY3z38va9g+UNL8iv8TxWLleMWfu1IkzbW9haQPA/+yfUS/4/098Q5c1Ned1upU1vSh\nmz/l2xPzra4l8z/wq0hnz49Iqhqr88BdSJdsV6tGMKovyBmT7U6q5zlAqbP4nW1/JGcv3AS8mpRH\nXGX1o2w/KGlvUrbN5/NZ0uQDSM+yfZ2kzpvrbfnjmnkop98zvvEm2teXVGmi3fYO/T5mEkq+Dk+Q\n9HTg9aRUxjpKxir23A1osvgRSXuS0kc783VLVm1jpyPPE/90zxGV0OiOvu672Bi+SfrHuAI4N4/l\nVk2JvEzSGaQl2QdIWo68qrUK2zdL2pR0lgtwnu0rqsZT4do5WefvZVdSHY6/13mjlLQNaZJ473xs\nRp8xPkDaYP6LY3zN9L/qufhEu9K6jQOBf8uHziFlU9RJxS35OnyalJ9+vu1LJa1LWq087Fgln7tB\nTBbvRbqS/6ztGyWt0/Vz+qa0HuK75AWckv4CvNWlduaz3dgbadHQYaQxsF93boV/xmoVH7cEafhn\nxXx/ZeA5NdqxH3AV6Z/l08CVwHtrxPs56czqinz/CcCVNZ+rQ0iZPJeTzl5mAhdXjPUC0gKx/8r3\n1wUOr/g6bFfw72EJ4PUF4/2IVFdp3Xw7EDi5Ka/DOPG3bEKsks8d6STi+6V+rzHirwF8uMbjLwR2\n6Lr/QuDCYu0b1C9e6Mk7g3S2d23uGL4NHFog7oo57lnAbQXirUea5Lm6Roz5wDJd95cB5teId2n+\neHnXsXkFfteVSTVgOm18Ws14Sxdo0+V1Y/TEm1Mw1kLPeUNfhw1Jq05vqPv7l4pV+rkDzidVwiz1\n2s4kJTqcB/wB+EKNWFdM5ljVW6OHbshFyCTt55S6dY6kqtUmn0yayX4jsDkpRe1VpLHNKvGeQcoC\neCNptvxzwB5VYnVCMrqIWWfdQFWla+eQc8n/kzRRvA+p0uYGwE8rxNqGlCe9LGlMfVPgPzyyTL0f\nZ0l6Delsr0R2wa8kfQj4IV31S2z/tUKsf0ra3vb5AJK2o3qqJjlGkddB0tqkwnJ7ksoqrAXMtn1T\nhTYVi9Wl9HP3R+ACSacx+nXtZx3IcqQ5kTeSShWcDKxje/Ua7QL4o6RPMDL88+bc3iKa3tEXKUKW\n0yqfT7pCOII0BHSD7d9UiLUP6Y95NeBE0pXBqa4/n3AMcLFG1/WpM55eunYOpDZeBnRWiN4KnESF\njh74Cmkx12kAtq+Q9G+Lfsi4/oP0+z4q6V/UXKVIegOHlGfdYapNar8LOC6PNwP8jXr1X6DA6yDp\nt6T04hOA19j+vaQbK3byxWL1KP3c/SHflqD6WoS7gEtIWXbn23aeFK/r7aRhqpMZWRlfbBV70zv6\nUkXINiT9kVxL2hxggaSqZ35fI1W8e6PtOQA1Yj3O9pdyHnKnrs9erlHXx/ZcSS+gbO2c9Wy/IWcb\n4JQ1U/mqw/afex7eV1lmSdvZvgCY6YqlIsZpV6168R1Ki/I2cErDXT7Hrlpzv1uJ1+FO0snKqqST\ngN9TfZFZyVhA2edO0ndtvwW41/ZX67SLVF11D+DrwPFKFWJrUSrz8jH3UYqlb6XGgJp+Iy3I+RRp\nEut84G5g1QpxnkI60ziHlOf+GeDPNds2A7iu8O+7FOks92TSpNb+pKX9dWJeSFrAMjffX4+0CKtK\nrP8jnZHOJU0ofohUn6afGJflj3MLP3dLk87Yjsr3ZwEvrxir2Hh/6deBVEhuL9KV7o2kk6GtKrap\nWKzSzx1wDWl46wrSuo2Vu28VY64L/DcpaeJfpJ3r1q/RxotK/5103xq5YErjFB/rcM13PqUl7XuS\nslJucYViVTnO6qTL/D1JE2Kn2P7virFOJWXZVN5zsifeiaRVu53c6jeSMoSq1s5BqYzqx0lXSGcA\n2wH/7mpDYKsAXyWtUlSOt5/7KHehVHxsPmmY64Ter1f9O8lnaZeR0ts2zmPiF7qnINYkYx0C/IUy\n4/2dmMVeh66YTyX9P+xJ2qO16oYcxWKVeu4kvY+0U926pGGu7qsfu+Zq8ZwauSdp9fQzK8Y4knRV\ndBKjf9c6ZcVH4je0o1/kOJy7atbU/DkCnm+70oRsT6z1gT1cfc/Yc0mTxJcw+oWuWvnvGo+unTPm\nsQpxn0JagSoKrECt2ZZVSG8Uh5Iq/41S9e9E0hzbs7tXOiqvhK4Q68YxDpfoXAb2Okhay/bNw45V\n+rmTdKTtd1d57KBJOmaMw3aharON7OinozyevhB3FYrqM17R2jldcVcjZVR0l43u+41SaaP2d5Jq\nhXTH6vsPW9Km7llcJmlL21UztC4k7QF6gdMy9/WA421vVSXeIJR6HaYrpbo3uwN72q617eRU0OjJ\n2NwZ/BcL7yo/tBoXg1K1Q++lkfK/SwIXSuqunXNdzdiHkoaqrmZkFbCplqJ6Kimz4FfU2xuXTief\nV/92UvzupfoengeSasisIen75KGRKoEkjfnGavu4im0r/To0VunnTmlHs11Jw5gvIc1dNWKzlnxG\nP1Z5hiJn9I3u6IHvk8bndiVNgL6NNInaOhq9kcETSR31A+4/RbBk+d9eryJlQjw04XdObGnb/1U3\nyCDyt22fKWkuI0Mj+9UYGtmy6/OlSFcKc0n7D1RV8nVosiLPnaSdSX8fOwNn58dv6fKlxuvoTo1d\ninS1cds439u3pnf0RRZMaZyNGjpcvRpmsctnd21kkOcOdmOkGmM/cR4fD1Uq9tXZseoC1y+J+0fS\nG1CJDuanknax/bOqAQaYvw1pYmwG6bX9N1UvavbenjavyBgTx30q9joUHkIrFis/rtRz9wvS1eP2\ntm/MsWqlWebFWwcx8v/fWbtRaf7A9o964h9Pyg4soukdfZEFU5TZMGOUrsvnaxgZeihy+ew0cfJj\npdKlH63Yvk+SdqfqdE7HSDrJ9sE1mvYgaTPvsxhdNrpKdst+wH9LepiR19l9XsEUz98GkPRtUunf\n3qGREhkQD5AK4dVR8nUoNoRWONZYqj53W5By338l6Y+kN4t+C+j1Opq0pucyBvO7zqL6hu8LafRk\nrKSXk/5w1mBkwdSnbJ821IYBkq4HNil1+azRpXGXII0vv8D2NjXat6nzQiKlEhDzbG+w6EcuMuaY\n2VClsqCqyAvqXk26NJ9FqmP0EtuX1IhZOzupK1Z3adwlSPNNJ9UZtir5OmiMfVSrKhkrxxvEc7ct\n6W/lNaS8+lNsH1UhzsW2n1e1HWPE692D9g7ggN4z/crxm9zRl6aCG2ZL+jlpQ+oidaN70qseJZVT\n/pbtuyrGOxvY3SMbZq9IqgXTmIlsSa9kpATtb2xXKaXQHa9U/vbRwBdt19nKsROrO5vqUeBm27fU\njPkK4HTblctid8U6mLRGoPIQ2iBi5XjFn7uu2EuQUnP3qPj/fwjpquBkRl9VDXXHsPE0uqPPuelH\nklawbixpE+CVVYcfJJ1Eyjx5I10bZtveb5EPHDvWj4BNSRUw614+F9O12GxN0mTWmfn+TqTVk72b\navQTexapeFtvFlTf45L5H2VL0oQ7pM55ju0DqravJ36d/O1OCeU7SK9tZ/x10jslKW+Kkj9/UveV\nn6StO2mvFdv3PWAbUtbItzs/p2Ks+0mL/R4iDaFVrhNUKtYgn7tSNPbuV+73REp5w/f8eaekR+dr\n77H9tZpNTbEa3tGfQ9od/ZseWbhyle2NK8brbHU23/YmSrtNnWe770nPUpfPkk60/fr8+aHdl6WS\nzrC9c4l2VW1fT+zzSamHXyZtzrEXsITthRYrTSLWfGCzzlmpUr2Py/vpTAdF0g2k8hFX0rWZTD9v\nHMpbzfV+Ptb9im1cnvTmuBfpjfwYUq7//Yt84OgYIm35V3s1duFYA33u6spXA6+1fWKBWIvld236\nZOzSti/R6HpNdTYK70z63atEVUUvAAAgAElEQVS0bPkOKkx45E5pZ1fc37THrK7PdyKtG+iY2W+w\nAY+XP9n2WZKUO72DlPZ+7bujz1YEOsvZV1jUNy5mdxeYB9I4n491v2+275P0f6SaN/uT0vE+LOlw\n20dMMoYlnU4qs123PcViMeDnri6nDe0/QqpeW9di+V2b3tH/RWlVYqem+muB22vEO0rSSqQ6IaeR\naqF/ot8gTtUv15L0RNsP12gPLDpLpO/Lrc4VgkYWTo0OWO+M+aF8NvN7Se8h1Q1ZtmKszwGX50tg\nkcbqK2UYDcDlSqWtf8LoYbl+sm48zudj3e9LntvYC3gmKSd8K9t3KdXkuYaUuDBZc1VjFfGAYg3y\nuZtBytLqTv+schVSas+Cgf2u3Zo+dLMucBSpyuHfSFXx3uxqNbOLXW7leMcBzya9YVTaxCDHuY50\nCb4EqQDZG0kdn4Dv2X52n/Gebvt2pf1wF1J13DrH3pJU6nlFUtXOFYDP9ztmmi/zVyddnXUWxVxi\n+46K7Sqav60CdUck3UVK4xMpDbeT/y3SVoWrVmlbjn0scLTHWLMhaUfbZ/UR6zrSG8bNpL/jvucj\nSsca1HMn6b2kocc76Uqbrfi7FqnDI+lB0k5cIlUhvaHzJWBd28v027Yxf06TO/oOpboUS/Qz/jhO\nnDm2qy6L74114FjH3ecGJONM6nTH26GfeDnmDOBXVR67uEi60naJy3yUatOcR09Oc6nUtPwz+jpT\nHeRcSUklTwhKxRrUc5fnXp7nPiqkDtp4z1lHnROzUT+niR290orHj9n+9RhfO8v2jhXjDqJk7NK2\nH6z6+EFRWkzzatu1tg/MsbrzmRfiChU281np10oMGahw/nZX3FG1c0qdJNRoT2+udW+53Uo7akna\nHphl+5h8dbSs8wrSYcYqLZ9U7WS7zjxfJ9bSpAn7NW3vkzPSNnDNFOFBaWpHfytpf9OfkRYNPNL1\ntcdLx1aIW6zsqbr2PLVdd8/T4pTq229OSq/sflPrO/1T41TW7IrZd0G2wkMGJXPB16b83qeNla9M\nZ5M6qfWV9kI+yfZ2w4w1CErrIzYATmf03EvfJVBUcM+CxaGpk7F3kmq0HE7aR3VP29fnr9V5Z3q2\ne7acU1pEVUXJPU8H4WTKLNkf1ZErrbBds+v1qOolNR/frVNOoW7+9iBr5xSVTyyen++ea3t+xVC7\nk04I5gLYvk1pA+xhxxqEP+XbE/OtjqLbag5aUzt68nDIO5RKA5wp6X9sf4N6KUcXkupeTHRssm2s\ntefpIA1iDFhpReYXSP8k60jaDPh0laEb4OnA1Z15l5wX/mzSGX4/bRKwUcXMiV4DqZ1TmqT9SJPP\nnTfy70s6arJplT0ezqmRncy2OpN/JWMV1+/82QQezic9nd91PcoU+xuIxnb0HbZPlnQx8B1Ju1Ah\nnU/S00j/wE+WtDkjbxbLk/YHreLPSnUzrLTwaj9SRkplKlgNUwVXsXY5CNgK+E2ONU9S1QJdRzL6\nDfYfYxybUOFc8FdppHbOQfk5XFHSVq5YO6d0RlC2N2lS8YH8Mw4lbVhfpaM/UdI3Sb/nO4G3A/9b\nsV1jxfpWxViDyKaaCXyEhUugVCkLchAL71lQueyxClfD7NXUjn5UfRfbtwI7SfowqaZ0v15C2jhi\ndaB7PO5+0ga/VbyLtOfpaqR88jOAyuPzKl8N8xhGVrHuQF7FWrV92SO2/95zFVP1jFfumiByWoRS\n9e+xWC54nrw+hlTts1M758uSqtbOGURFR/XEWkDFK13bX1Dag/Y+0vj1J22fOexYWennrrO/xcup\nub+F7TOUFguW2LMABl0N0wPcebxpN9K4a6lY203mWB/xrgeeVLB9l+WPV/YeqxHzaFKe/3zSit4j\ngG9UjHUy8D5SXfXOFdGPK8a6jpST/4fctiuB+YX/dtaq+Lh5JduRY36AVHnxoHybB+xfMdahkzk2\njFvp567rf2J+17FLK8Y6azLH+oh38SCfy6ae0Q/KTyW9kYUvBats6H0ECw8zjHVsskpu6gFlV7F2\nvBf4GKmNxwO/JC2cquJdpMn2j5OuCs4C9qkYq+TE7phcPZ+59gYrY7TlS5J+Q0pYANjL9uUVw/WW\n3QB42RjHJpTn0w4llRXpLPqzK6Z9Uv65q72/RU7eWBpYRWmVffcw8Go12na2pMMYUDXMRqZXDoqk\nX5DSNnsX1nyxjxjbkFbq7k8aFulYnlQWeNOKbStaDVMLr2JdHjjMDaj8NwhNzd9W2eqQS5HeIJ9J\numo52hVzwiW9mzTUuC7pSqhjOdJuZG+uEPMG4BW2a81VdcUr9tzleLX3t8gT4fsDzyCdPHU6+vtI\nZcUrVZtUoWqY48afZh195cqXXTFeALyQ9A/XvbHw/cBPbP++YtxS1TCXApazfXfP8acC97knvXSS\nMRf5j+A+sm4kfcT25zVSTrk3VpU8/0bmb+eMoCIVHXO8H5I6vPNIZ9032d6/YqwVgJVIE/bdNYbu\nd8UFhJIuKPWcD+C5mwG8z/aXJ/zmycV7r6tlOY0Vq2h5ljF/RpM7ekl/AC4i/WGfZ/vqmvGOAo6w\nfWWBtq3VuZzPL9Sytu+rGGsGcJwLVMPMv+Mv3FOAS9LupIqb764Q827gz6ThmovpmfhzHwumJL3C\n9k9KvbHlmPPI+dseKWc93xULuJXM9lDZUg+Px8oT15e4frnj9YBbbD8k6YWkLRSPc96wZpIxOnsc\nvAB4GvBjqheD645b7LnL8S6xvVWhWK8j/Z/dL+njpCHbg6sOtahgeZYx4ze8o38S8DzSwpDtSDP5\n823vXjHeNaTL3hupuKFEV6wfkM7qFwCXki4Dv2r7sIptOx94kWtWw5R0me3njvO1q21vVCHmDNJY\n7p6kjuB0Uu3zWm+8pXT+gZXrd+f87d/W6OiL1c5R2VIPg6hrP490NbQ2aSX6qaR1Cbv0EWOsInAd\nrvIGmeMWe+5yvC+T5sF6S6D03TlrZE+L7YGDgcNIWUaVthfUAMqzdGv6ZOwC0qXqAlK1ubvoSb3s\n08tKNCrb0Kkm+JuAn5Mufy8jveBV/BG4IA+TVK6GyaLXBVRKr7S9gJQz/Iv85rsn8BtJn+p3TLLk\nMFCXovnbpH0QKu9L2uN5wJsk1S71AGwqqXPVKNK6kPu6YlYZu37M9qP5rPwI20dI6mti1/ZekHLB\n3bVDUudYhTZ1lHzuADrlCbqTLwxUGQfvnADsChxl+3SlUhxVvSF/3Lenba3Oo++4jzTp9CXSREet\nqnO2bx5r0q5iuCWVFkq9inTW8YjyisCK/pBvS5AmxKq6S2Ms8MmTs5VyhvPjn0T6o96TdPZ3OHBK\nhVDbsIhhoCpcPn+7ZLZHsYwg2zNKxeryiNIy/reSdg2DdNZbRelMtKLZVC5bzfXWfHKxE3Bo/v+o\nvE7FdtWFh5PS9KGb3UgpZFsBD5PKFZzrPupt98QrWcDpfaQUtCtIHeCapPrxz1/kAyeOW6sapqSt\nSDvffId0hQHpd34raSPkiyvEPA7YmHRpf4Ltq2q0r9HDQDCQbI9GZgQBnQqd7yINdR2vtNL59bYP\n7SPGQDLRcuyiz11Oq+xdGdt3erVSEbOXktap/F7S04Hn2D6jYrsGWg2z0R19h6RnkYZd9geeavvJ\nFeMUnbQbI/4TXD3drVg1zJxhsy+pcwa4mnTVUWnYS9JjjAwn9ZbJrdMBdoaBDiOluVVNTSuWvz2A\nbI9GZgSVNMBMtKLPnaRvkIY2dyCVeXgtaUJ774rxSpZ3Hmw1TDdgBdx4N9Iu9zeQFuZ8jDSrv1SN\neJfkj3Pzx2WosYKSdCb/EdKeqZ8kDRlUjXUxKb/38q5jVw37NRjQ6/okUj2Zk0gT2Z8AVqsR7wZS\nZdJS7buyYKx5pDee7te16Krdmu2bBfwfqfTGHzu3irHWKty2os9d57FdH5clZfNViXUgaavJ3+X7\nzyCtP6jatjn5Y/fvekWp57LpY/SfI/3ipWo/FJu0G+/soE7j3OBqmKX0DAN9yjWGgbrc6UKLdLKS\n+6g2uqIjZWsifWeseSpXX/RT+rn7Z/74YL46uIdURbWK0iWZB1oNs+kd/TXAAUoFpWqPW7nspN22\nTulV821/StIXSdk3VRWvhtlQbyYNA+0HvK/rja3v4Zau/O05+dK3SP42ZbM9SmcElfZk22dJktO6\nkIOUinV9skKsD3V9vhTwGlINoqpKP3c/lbQiaahwLqlTrVqps/Sb0EEUrIbZq9Fj9KXGrSQ9E1jV\nC6d+bQ/cbvsPYz9ykTEvtv08SReRhiHuIdVXf2a/sXK8VUjVMF9M6ljOIK3kq5VHW3dyt8kGmL9d\ndGP1fHKxM+l1/WWNk4vilNYMbE8avvk1aVn/IbY3KBS/1iKlQT13eX5oKVfcalPSh0jDXjuRRh7e\nDvzANVbLSnoKI9UwL3K9apijlRoDGsSNQuNWwE9JM+K9x59Dmiyq0rZPkOrIvAa4A7gd+EyN37V0\nNcxtSVdEf8r3NwW+PuzXdEB/J0Wfu/z47UnFwiBtQrLOsH/PAT13W5LGqlcnDeP8CNi6YqyVu26r\nkNIjrx/279jTxm1JFVjf2rnViLUT6ergC6S9aOu0q2g1zN5b08/oLwR2JE1ybJHHrY53n2cIki61\nveU4X6u9zLru2UGOsdAqx7GO9RHvYtK8wWkeyTCqXeuniQbw3JVMwy1d0XEgSlz5Ke3JbNLv+Chp\nBfqnbZ9fMV7R507Sd4H1SJO8j+/54D7qK0nan5TmPddlNhnvVMM8m5S51F0N8xe2n1X3Z0Dzx+gP\nZOFxq3+vEGfFRXytr1RN5aJc+fPX2T7J9kOkssD/Y7uvjUy6cpBnSvpA15eWB2otkHHLJ3cH+NyV\nnGj7PAUrOpbWndYL1ErrdflFP6Wfu9mkFe11zm5XJ+0X/SxJVwIXkDr+C11tmPU/GKmGeRmMqoZZ\nKd14LHV3HBoop/G4V5M69+OB2bZ/UyHUnDyZM4qkdzCyqGiy9uj6/ICer72034aR9l9dlvSmu1zX\n7T7SGXlVoyZ385hiIzubGgb13D2cO4MSE22lM4JK62xyfw+kTe6BSpvc57+z90n6v3x7T04sqKr0\nc3cVqehaZbY/ZHvbHOcA4K+kSdOrlGpp9Rvvq/kN8kO217W9Tr5t6orrSsbSyDN6SWv2HOpUm1w6\nZ+D0u5hlf+AUpbo03atFn0g6e+ureeN8Ptb9CTlVfjxH0ndcqBpmNtZWh/su8hFTjO1zlIrBbeKy\nGz/XzvYYYEZQcQWv/I4klU/4er7/lnzsHf0EKf3cSfoJ6U17OeAaSZf0xKtSX+nJpCvHFfLtNkb6\nqSrukLScC1XD7NXIjp60LL4z1tdh0qTYU+nzstz2ncC2knZgZLXo6bZ/XaFtHufzse7343OSRlXD\nlFS5GqbTjH3tssdNZ3tBHkMvGbNEGu4ruj5/kNF7HZu0k1ATlEzr3dKjyx38WtIVFeKUfu6+UKEN\nY1IqA74RadXvxaRhmy/Z/lvN0J+wfVLOBHwxaZL3SFKqb22NnoztkLQ2qa7Mi4HDXajgf8W2LGAk\nt/rJpD9E8v2lbFe6VJU0z/Zm+apjC3I1TDegpnrTSTqSdOVyEqMrfw69M9U4FR17jw3LOGm9+7lC\nAUFJc4HXOacrS1oX+L8ak+KNe+6UdqlbhTQMdCHwW9IK9lodqaTLbW8u6XOkldk/6Byr3+qGd/RK\nC6Q+RnpX+yJwrO1HFv2oqUnS1aQyqj8g1aU5R9IVrr41YbGa6k03Tj69q76plcz2KJ0R1GSSdiSl\naP6R9JytRUpRHWubvMnEK51NtTWpmuazScO2M4AH+n1dlca5NiIlAmxLGiX4K6kw3IEV2/ZT0hDr\nTqQTvX+SSrZULgjXrZFDN5I2JnXwG5Fm3vd2uTIITfVN4CZSNcxz86KdOmP0JWuqN5pzPfSCamd7\nDDKbalDqvgE5rbCdRRrugpRD3/cy/gE+d18jJVOcxEhF1/X7DZLP3q+SdC9pD+q/Ay8nVdmt1NED\nryclc3zB9r1K1TA/XDHWQpqadXMFqW75eaQn78uSDu/chtu0wbB9uO3VbO/i5GZS7ZGqfipp0rsE\nTWWSVpd0iqS78u1HklavEbJEtsegMoIGqdLeAJK2lPQ0gNyxb0bakP4wSStXCDmw5872DcAM2wts\nH0OfmXI5q+gESX8CziF18NeRsgOr/K6ddj1I2lRp+3zoUaBS1c+xNHLoRuPsJ9rhCvuKTgUqUCtb\nqZZ6ZyK7WE31JpN0JmnI67v50JuBN9neqc84Rfc+Vaq9f6Lt1/TzuGGRdLDtj1d43Fzgxbb/Kunf\ngBOA95I6/GfbrtQ5q2tf5hIknUuai/hfRlaz/3s/wyOSvkTOnbd9e8G2DbScdSM7+ulIhWtlTyed\nieyJjk0iTvHaOZJ+a3ubfh83lXTPJUn6f8Ddtg/K9/t+Hbrins0YmWyuWA0zD4feSbpieD8pLfLr\n+Sx/qDTgvTIaOUY/TRWthinpLNs7TnSsJe6R9GbSojpIm5n0nTXiwex9Ok9pn9zGZQRBsYnnGRrZ\ndGdHYJ+ur9XpY4pWw+xap7IAOA241RU34xmAgZazjo6+OYrUylaqnbEMsIqklRhdO2O1Eg1toLeT\nsim+TDoDvJB6JV5L7n26FOm17D4LbVIefYkyA8eTFv39hfR3fB7QqRpbuf6T7d5V6xfkxU59yVfL\nR9i+WtIKpJTIBcDKkj5k+/hFR1gsBlrOOjr65ihVK3ux1M5oknymVmV14yiDyPYYQEZQabUnnm1/\nVtJZpBOTM7pyypcgjdVX0jORuwTwXNJwS7+eb/td+fO9SLtCvSpPIP+ckSvBoSm0SG9cjRyjl3QE\ni1hl6j6qzU1FKlMN873DXFi2OEha1OYYtv2ZPuMV3/s0Z/8cQSrIB+lsdz/bt/Qbq6TSE8+DoELV\nMLsXHkk6nTTJ+Z3erw2DClfDHPfnNLSj72TdbAdsCPww338dcE3Xu/OUpzGqYXZ9re9qmNOJpA+O\ncXgZYG/gKbaXrRCzaKZMqYyg0gYx8dxUeVL3i6QFSWcDz7J9h6QnkFa1FikFXLFtXyBdRT6LVCun\nbjXMsX9OEzv6DqXdm7bvvNMp1eI4z/bWw21ZOd2LVHoXrLR1BeUgKJUR3o/UyZ8IfLHqRFvJTJlS\nGUGDMt7Ec++xYcj/7+9mpJrmb4Bvus/V8ZLWBw4nXbl8pets/iXAzrbHOmFYrCQ9kZReuS1pDdE2\nwL22NywRv+lj9CuRxkc772zL5mNtUrQa5nSTx3E/QCrgdiywhesXmCqZKVMkI2iASk48l1akGqbt\n3zHGwijbvwR+WbONpZSuhjlK0zv6Q4DL86WXSO/sBw21ReUVrYYpaZH/oC5U9rQJJB1GWpF4FGmr\nyH8UCl0yU6Z0RlARU6REQ6lqmAtpytWyBlcNc/TPafLQDUCeGe+U6rzY9h3DbE9pKlwNM78pQuqs\nZpPKSQjYhLQHb2sW70h6jDSB+Cij3xRbuwq4lEFMPJemwtUwe2IPdRK2qx0DqYa50M+ZAh39aqQq\neN2lds8dXoumBkknAwfavjLf3xg4qOpy9OmkRKZM6YygQSldZqAkFa6G2RO7UrmHQZDKV8Nc6Gc0\nuaOXdCjwBuBq4LF82K62I8y0Iulq2xtNdCwsrESmzCAyggahdJmB0nKqca1qmD3xnkYqlGjg0iaN\nEOQTjO1Inf3LSX8ni9rvevKxG97RX0/aJq7WizsdSTqeNCT0vXzoTaTtCfccXqumhtKZMiUzgkqT\n9Nyuu4+XGbD9kSE1CUlbAn/udMKS3prbdTPpqrRS2qHSHtGfBH5NukJ4ASkv/9tFGl6tTe9j5Ez+\nEXJqZb5dafuxRTx88j+n4R39z0ljdKUm2aaNXAqhOzXtXOBI2/8aXqumhrzK8xhGZ8rs1W+doDEy\ngr5aepJtECRdYnurIf78QVXDvJ5UU+qefP8ppHz1DRb9yMHRgKph9mp61s2DpFS3sxi9aq/VK2NL\nyB36l/Mt9Kd2pswAM4KKKlhmoKQZXWftbwCOctoZ7UdKVR6ruoc02dxxP0NOdbX9gYm/q76mn9GP\nWZfeLa1HX1KutngQC09krzusNk0nUyUjqFSZgcJtugrYzPajkq4D9ukkYEi6yvbGfcbrdKabAc8B\nTiX9zrsB823/e7HGN1Sjz+ijQ6/laFLN7VF7xobxlcyUsd3U3dtGsb3OsNswhtLVMJfLH/+Qbx2n\n1mnkVNL0M/pZwOdI9W66d12Ks9IJSLrY9vMm/s7QMVUyZUoqVWagNKWNvDvVMB/Ix9YnJRS0ZtHf\n4tL0jv580ma7XwZeQRonXcL2os68AiDpENIKx5MZPb8R/yST0ORMmZIk/S+pzEDn6vktwALbfZUZ\nmAqanko6SE3v6C+z/VxJV9p+TvexYbet6bpWyHbzdPijrmOqZspUpa5tABd1rA2amEq6uDR6jB54\nSNISwO8lvYdUZrR1l8+DYHuHYbdhqpkqmTKFLZC0Xk+ZgVbO6bjQjlVTUdPP6LcErgVWBD5DKrh0\nmO2LhtqwKULSrqSl1d3zG58eXouabapkypQ0yDIDTTNOKunhw8yjX1wa3dGH6pT2yVwa2IG0JeFr\ngUts7z3UhoXGKV1moKmamEq6uERH31KS5tvepOvjssDPbT9/2G0LwzeoMgOhmaZErm+o5J/544OS\nnkGqo/H0IbYnNMs3gYcBcpmBQ4DjSHnqRw2xXcVJ2jIXM+vcf6ukUyUd3jOc01rR0bfXTyWtCBwG\nzAVuIlVkDAHGKTNg+xPAM4fYrkGYNm9q42n00E0uzLU3C08otmbj4sUhj8EuZbvKqsLQQqXLDDRZ\nd7qopP8H3G37oHy/Mfv3DlLTz+i/S9rQ9yXAOcDqjC5KFCbB9kPRyYcenTIDp1KmzECTzZDUSSXf\nkVSmuKPpKeZFNP2M/nLbm3dNKC4JnGd762G3LYSpbrqUGZD0MWAX4C/AmqQN5J3f1I61vd0iA7RA\n09/NOvU27s1b4d0BPHWI7QmhNcZaj2L7d8NoyyDZ/mwudd55U+uc3S5BqnPfek3v6I+StBLwCeA0\n0qrYqHMzSfm5m8Xo+Y3YbzdMO9PlTW08jR66CdXlbdP2I81rzAO2Jm02HLVuQphmGnlGL+nNtr/X\ntWHAKLa/tLjbNAXtB2wJXGR7B0nPAv5nyG0KIQxBIzt6Ug1wGNkwIPTvX7b/JQlJT7J9naTW1/QI\nISwshm5aStIppPr9+wMvAv4GLGl7l6E2LISw2DWyo5d0+KK+HpuD90fSC0gbPv/C9sPDbk8IYfFq\n6tBNb93o0KecI3217fttnyNpeWBz4OIhNy2EsJg18ow+1CfpcvLCkHx/CWCO7S2G27IQwuLW1DN6\nACTNBP6LhTcHjxTBialrYQi2H+taBh5CmEaaXuvm+6QdptYBPkWqwHjpMBs0hfxR0vskLZlv+5F2\nEQohTDONHrrp2hx8vu1N8rFLbW857LY1naSnAoeTMm4MnAXsb/uuoTYshLDYNf1SvlPr5va8/+lt\nwLTYKKCu3KHvMex2hBCGr+kd/cGSVgA+CBxB2hz8/cNtUrNJ+ojtz0s6gtEbXAORmhrCdNTYjl7S\nDGCW7Z+S6mPvMOQmTRXX5o9zhtqKEEJjNH2M/hLbWw27HVNNfpM81PaHht2WEMLwNfaMPrtA0teA\nHwIPdA62aVOEQbC9QFLrN1MIIUxO08/ozx7jsCOPfmKSjgRWA05i9JvkyUNrVAhhKJp+Rr+37VG5\n35LWHVZjppilgHtI6ZUdBqKjD2GaafoZ/dzeJfud3PphtSmEEKaaRp7R500yNgJWkPTqri8tT1cp\nhDC+vMnzkcCqtjeWtAnwStsHD7lpIYTFrKklEDYAXg6sCLyi67YF8M4htmsq+RZwAHnRme35xAKq\nEKalRp7R2z4VOFXSNrZ/O+z2TFFL275EUvexR4fVmBDC8DT1jL5jd0nL56JcZ0m6W9Kbh92oKeIv\nktYjr46V9Frg9uE2KYQwDE3v6He2fR9pGOcm4JnAh4faoqljX+CbwLMk3UraUvDdw21SCGEYGjl0\n02XJ/HFX4CTbf+8ZigjjyGmpL5a0DLCE7fuH3aYQwnA0vaP/iaTrgH8C784bkfxryG2aEiStCLwV\nWBt4QucNMoqahTD9NDqPHkDSysDf87L+pYHlbd8x7HY1naQLgYuAK4HHOsdtHzu0RoUQhqLRHb2k\nt4513PZxi7stU81Yi81CCNNT0zv6I7ruLgXsCMy1/dohNWnKkPR+4B/AT4GHOsdt/3VojQohDEWj\nO/peedz5BNsvHXZbmk7SvsBngXsZ2YDEtqNWUAjTzFTr6JcErrK9wbDb0nSS/ghsZfsvw25LCGG4\nGp11I+knjJyNLgFsSCq7GyZ2A/DgsBsRQhi+Rnf0wBe6Pn8UuNn2LcNqzBTzADAv1/TvHqOP9MoQ\nppmpNnSzPbCn7X2H3Zamk/S2MQ47MpZCmH6afkaPpM2BNwKvA24kNs6YlN58eUlrENUrQ5iWGtnR\n51rqe+bbX0h7xsr2DkNt2BSTVxK/jvQ8PgM4ZbgtCiEMQyM7euA64Dzg5bZvgMfzwsMEJC0HvJp0\nFbQ+6QpoHdurD7VhIYShaWpH/2rSMMPZkn4BnABENbPJuQu4BPg4cL5tS9p9yG0KIQxRI8sU2/6x\n7T2AZwFnk0rsPlXSkZJ2Hm7rGu8A4EnA14EDck36EMI0NmWybiStRBpvfoPtHYfdnqaTtC7pqmhP\nYBZwIHCK7d8NtWEhhMVuynT0oTpJG5M6/DfYfuaw2xNCWLyiow8hhJZr5Bh9CCGEcqKjDyGElouO\nPoQQWq6pefShJknbAQcBa5FeZxH16EOYlmIytqXypurvBy4DFnSO275naI0KIQxFnNG3199t/3zY\njQghDF+c0beUpEOAGaRaN9316OcOrVEhhKGIjr6l8oYjvWz7RYu9MSGEoYqOPoQQWi7G6FtG0ptt\nf0/SB8b6uu0vLe42hVfVWpoAAAPGSURBVBCGKzr69lkmf1xujK/F5VsI01AM3bSUpO1sXzDRsRBC\n+0VH31KS5treYqJjIYT2i6GblpG0DbAtMLNnnH55UrplCGGaiY6+fZ4ILEt6bbvH6e8DXjuUFoUQ\nhiqGblpK0lq2bx52O0IIwxdn9O31oKTDgI2ApToHY8FUCNNPlClur+8D1wHrAJ8CbgIuHWaDQgjD\nEUM3LSXpMtvPlTTf9ib52KW2txx220IIi1cM3bTXI/nj7ZJ2BW4DVh5ie0IIQxIdfXsdLGkF4IPA\nEaT0yv2H26QQwjDE0M00Iml/218ZdjtCCItXdPTTiKQ/2V5z2O0IISxekXUzvWjYDQghLH7R0U8v\ncfkWwjQUk7EtI+l+xu7QBTx5MTcnhNAAMUYfQggtF0M3IYTQctHRhxBCy0VHH0IILRcdfZgWJB0k\n6UOL6Wf9TNKKi+NnhTAZkXUTwjgkPcH2o/0+zvYug2hPCFXFGX2YsiQtI+l0SVdIukrSGyTdJGmV\n/PXZkn7T9ZBNJf1W0u8lvXOcmN+R9A1JFwOfzz/j25IukXS5pN3y9y0t6URJ10g6RdLFkmbnr3W3\n4QO5bVdJ2j8fW1vStZK+JelqSWdIitTXMDBxRh+mspcCt9neFSAXcTt0Ed+/CbA1sAxwuaTTbd82\nxvetDmxre4Gk/wF+bfvteTjmEkm/At4N/M32hpI2Bub1BpH0XGAv4HmkdQwXSzoH+BswC9jT9jsl\nnQi8BvhelSchhInEGX2Yyq4EdpJ0qKTn2/77BN9/qu1/2v4LcDaw1Tjfd5LtBfnznYGPSpoH/Ia0\nW9eawPbACQC2rwLmjxFne+AU2w/Y/gdwMvD8/LUbbXfeHC4D1p6g7SFUFmf0Ycqy/TtJWwC7kMoy\nnwU8ysgJzFK9D+m9L+mzwK453mb5+ANd3yPgNbav736gVLts0ENdny8gVi2HAYoz+jBlSXoG8KDt\n7wGHAVuQtkx8bv6W1/Q8ZDdJS0l6CvBC4FLbH7O9WVcn3+uXwHuVe3ZJm+fjFwCvz8c2BJ4zxmPP\nA16Vx/OXAXbPx0JYrOKMPkxlzwEOk/QYaUetd5POjI+W9BnSUEu3+aQhm1WAz4wzPt/rM8BXgPmS\nlgBuBF4OfB04VtI1pL15rwZGDR3ZnivpO8Al+dD/2r5c0tr9/Zoh1BO1bkKoQNIMYEnb/5K0HvAr\nYAPbDw+5aSEsJM7oQ6hmaeBsSUuSxvH/Mzr50FRxRh9CCC0Xk7EhhNBy0dGHEELLRUcfQggtFx19\nCCG0XHT0IYTQctHRhxBCy/1/jJDi7afEjlgAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nO0ZW_ut_ohb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "outputId": "7d673acc-212c-4192-c42c-aa0c31dac3b0"
      },
      "source": [
        "df.boxplot(column = 'beer_servings', by = 'region', figsize = (10,6));"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmsAAAGTCAYAAAB3ZVUNAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3XucXWV97/HPV4KKgiCFptwktmId\njAU1pV7SdiKtiniKnlplahVtKm2PprXleIymLdLDnMbTqsdbrdgoaDVivVKCCKWZttGCggUURity\nKWAUBUQCSEn8nT/2GtjESTIzmb33mpnP+/Xar9n7WZfnWeuZvec7z1prr1QVkiRJaqeHDLoBkiRJ\n2jHDmiRJUosZ1iRJklrMsCZJktRihjVJkqQWM6xJkiS1mGFN0owlOTPJ6YNux6DtbD8keUWSTf1u\n01Qk+WySkwbdDkk7Z1iT5oEk1ye5J8mWJLcn2ZDksEG3q1uSSvK4QbdDD6iq46rqrEG3Q9LOGdak\n+eO/VdXewEHAd4B3Drg9PZOOBf355T6QFg7f6NI8U1U/BD4OHDlRlmTfJB9M8t0kNyT5k4k/9Ene\nk+QTXfO+OclFTRgYTnJTkjcm+V4zgvfSHdWd5FVJrklyW5JzkhzclP9LM8sVzejfSyZZdo8kb2nq\nuS7Ja5rRuEXN9LEko0k+D9wN/HSSg5t6bmvqfVXX+h50aHJiW7peX5/kDUmubkYjP5Dk4V3Tn5/k\n8iTfT/KFJD/XNe3JSb6c5M4kZwP3L7fjXZN3JbkjydeSHNsU/kaSy7ab8Y+TfGYHK5lsH+ybZF2S\nzUluTnJ6kj2msU9/p3n+kOb34oYktzS/L/s205Y0y52U5D+b9a3ZxTZLmiWGNWmeSfII4CXAxV3F\n7wT2BX4a+GXg5cArm2mnAE9qzq36RWAlcFI9cC+6nwIOAA4BTgLOSPKzk9T7LOAvgBfTGd27Afgo\nQFX9UjPbUVW1d1WdPUnTXwUcBxwNPAV4wSTzvAw4Gdina/03AQcDLwL+T9OOqXop8BzgZ4DHA3/S\nbMuTgfcDvwv8BPBe4JwkD0vyUODTwIeA/YG/B359F/X8AvBNOvvxVOCTSfYHzgEem2Rou2384E7W\ntf0+OBPYCjwOeDLwbOB3mnmnsk8nvKJ5rKDze7I38K7t5lkO/CxwLPBn27VbUo8Y1qT549NJvg/c\n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\nTkSuQmCC\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kFSLUjp-CWuo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = df[df.dropna(subset=)]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iMT6f_s4B-Wf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 418
        },
        "outputId": "2996969c-db8d-470c-a9a0-c4887d46ec5f"
      },
      "source": [
        "from bokeh.io import output_file, show, output_notebook\n",
        "from bokeh.models import ColumnDataSource, HoverTool, CategoricalColorMapper\n",
        "from bokeh.palettes import d3\n",
        "from bokeh.plotting import figure\n",
        "from bokeh.transform import transform\n",
        "output_notebook()\n",
        "x = df.beer_servings.values\n",
        "y = df.wine_servings.values\n",
        "country = df.country\n",
        "region = df.region\n",
        "source = ColumnDataSource(data=dict(x=x, y=y, country=country, region=region))\n",
        "hover = HoverTool(tooltips=[\n",
        "    (\"index\", \"$index\"),\n",
        "    (\"(x,y)\", \"(@x, @y)\"),\n",
        "    ('country', '@country'),\n",
        "])\n",
        "palette = d3['Category10'][len(df['region'].unique())]\n",
        "mapper = CategoricalColorMapper(factors = df['region'].unique(), palette = palette)\n",
        "# create figure and plot\n",
        "p = figure(plot_width=600, plot_height=600, \n",
        "           tools=[hover, \"wheel_zoom\", \"box_zoom\", \"reset\"], \n",
        "           title=\"Beer and Wine Servings per Year by Country\")\n",
        "# create plot\n",
        "p.scatter(x='x', y='y', size=10, alpha=0.8,\n",
        "          color={'field': 'region', 'transform': mapper},\n",
        "          legend='region', \n",
        "          source=source)\n",
        "# add axis labels\n",
        "p.xaxis.axis_label = \"Beer Servings\"\n",
        "p.yaxis.axis_label = \"Wine Servings\"\n",
        "output_file('interactive_bokeh_plot.html')\n",
        "show(p)\n"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "    <div class=\"bk-root\">\n",
              "        <a href=\"https://bokeh.pydata.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
              "        <span id=\"1001\">Loading BokehJS ...</span>\n",
              "    </div>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "(function(root) {\n",
              "  function now() {\n",
              "    return new Date();\n",
              "  }\n",
              "\n",
              "  var force = true;\n",
              "\n",
              "  if (typeof (root._bokeh_onload_callbacks) === \"undefined\" || force === true) {\n",
              "    root._bokeh_onload_callbacks = [];\n",
              "    root._bokeh_is_loading = undefined;\n",
              "  }\n",
              "\n",
              "  var JS_MIME_TYPE = 'application/javascript';\n",
              "  var HTML_MIME_TYPE = 'text/html';\n",
              "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
              "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
              "\n",
              "  /**\n",
              "   * Render data to the DOM node\n",
              "   */\n",
              "  function render(props, node) {\n",
              "    var script = document.createElement(\"script\");\n",
              "    node.appendChild(script);\n",
              "  }\n",
              "\n",
              "  /**\n",
              "   * Handle when an output is cleared or removed\n",
              "   */\n",
              "  function handleClearOutput(event, handle) {\n",
              "    var cell = handle.cell;\n",
              "\n",
              "    var id = cell.output_area._bokeh_element_id;\n",
              "    var server_id = cell.output_area._bokeh_server_id;\n",
              "    // Clean up Bokeh references\n",
              "    if (id != null && id in Bokeh.index) {\n",
              "      Bokeh.index[id].model.document.clear();\n",
              "      delete Bokeh.index[id];\n",
              "    }\n",
              "\n",
              "    if (server_id !== undefined) {\n",
              "      // Clean up Bokeh references\n",
              "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
              "      cell.notebook.kernel.execute(cmd, {\n",
              "        iopub: {\n",
              "          output: function(msg) {\n",
              "            var id = msg.content.text.trim();\n",
              "            if (id in Bokeh.index) {\n",
              "              Bokeh.index[id].model.document.clear();\n",
              "              delete Bokeh.index[id];\n",
              "            }\n",
              "          }\n",
              "        }\n",
              "      });\n",
              "      // Destroy server and session\n",
              "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
              "      cell.notebook.kernel.execute(cmd);\n",
              "    }\n",
              "  }\n",
              "\n",
              "  /**\n",
              "   * Handle when a new output is added\n",
              "   */\n",
              "  function handleAddOutput(event, handle) {\n",
              "    var output_area = handle.output_area;\n",
              "    var output = handle.output;\n",
              "\n",
              "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
              "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
              "      return\n",
              "    }\n",
              "\n",
              "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
              "\n",
              "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
              "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
              "      // store reference to embed id on output_area\n",
              "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
              "    }\n",
              "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
              "      var bk_div = document.createElement(\"div\");\n",
              "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
              "      var script_attrs = bk_div.children[0].attributes;\n",
              "      for (var i = 0; i < script_attrs.length; i++) {\n",
              "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
              "      }\n",
              "      // store reference to server id on output_area\n",
              "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
              "    }\n",
              "  }\n",
              "\n",
              "  function register_renderer(events, OutputArea) {\n",
              "\n",
              "    function append_mime(data, metadata, element) {\n",
              "      // create a DOM node to render to\n",
              "      var toinsert = this.create_output_subarea(\n",
              "        metadata,\n",
              "        CLASS_NAME,\n",
              "        EXEC_MIME_TYPE\n",
              "      );\n",
              "      this.keyboard_manager.register_events(toinsert);\n",
              "      // Render to node\n",
              "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
              "      render(props, toinsert[toinsert.length - 1]);\n",
              "      element.append(toinsert);\n",
              "      return toinsert\n",
              "    }\n",
              "\n",
              "    /* Handle when an output is cleared or removed */\n",
              "    events.on('clear_output.CodeCell', handleClearOutput);\n",
              "    events.on('delete.Cell', handleClearOutput);\n",
              "\n",
              "    /* Handle when a new output is added */\n",
              "    events.on('output_added.OutputArea', handleAddOutput);\n",
              "\n",
              "    /**\n",
              "     * Register the mime type and append_mime function with output_area\n",
              "     */\n",
              "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
              "      /* Is output safe? */\n",
              "      safe: true,\n",
              "      /* Index of renderer in `output_area.display_order` */\n",
              "      index: 0\n",
              "    });\n",
              "  }\n",
              "\n",
              "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
              "  if (root.Jupyter !== undefined) {\n",
              "    var events = require('base/js/events');\n",
              "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
              "\n",
              "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
              "      register_renderer(events, OutputArea);\n",
              "    }\n",
              "  }\n",
              "\n",
              "  \n",
              "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
              "    root._bokeh_timeout = Date.now() + 5000;\n",
              "    root._bokeh_failed_load = false;\n",
              "  }\n",
              "\n",
              "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
              "     \"<div style='background-color: #fdd'>\\n\"+\n",
              "     \"<p>\\n\"+\n",
              "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
              "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
              "     \"</p>\\n\"+\n",
              "     \"<ul>\\n\"+\n",
              "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
              "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
              "     \"</ul>\\n\"+\n",
              "     \"<code>\\n\"+\n",
              "     \"from bokeh.resources import INLINE\\n\"+\n",
              "     \"output_notebook(resources=INLINE)\\n\"+\n",
              "     \"</code>\\n\"+\n",
              "     \"</div>\"}};\n",
              "\n",
              "  function display_loaded() {\n",
              "    var el = document.getElementById(\"1001\");\n",
              "    if (el != null) {\n",
              "      el.textContent = \"BokehJS is loading...\";\n",
              "    }\n",
              "    if (root.Bokeh !== undefined) {\n",
              "      if (el != null) {\n",
              "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
              "      }\n",
              "    } else if (Date.now() < root._bokeh_timeout) {\n",
              "      setTimeout(display_loaded, 100)\n",
              "    }\n",
              "  }\n",
              "\n",
              "\n",
              "  function run_callbacks() {\n",
              "    try {\n",
              "      root._bokeh_onload_callbacks.forEach(function(callback) { callback() });\n",
              "    }\n",
              "    finally {\n",
              "      delete root._bokeh_onload_callbacks\n",
              "    }\n",
              "    console.info(\"Bokeh: all callbacks have finished\");\n",
              "  }\n",
              "\n",
              "  function load_libs(js_urls, callback) {\n",
              "    root._bokeh_onload_callbacks.push(callback);\n",
              "    if (root._bokeh_is_loading > 0) {\n",
              "      console.log(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
              "      return null;\n",
              "    }\n",
              "    if (js_urls == null || js_urls.length === 0) {\n",
              "      run_callbacks();\n",
              "      return null;\n",
              "    }\n",
              "    console.log(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
              "    root._bokeh_is_loading = js_urls.length;\n",
              "    for (var i = 0; i < js_urls.length; i++) {\n",
              "      var url = js_urls[i];\n",
              "      var s = document.createElement('script');\n",
              "      s.src = url;\n",
              "      s.async = false;\n",
              "      s.onreadystatechange = s.onload = function() {\n",
              "        root._bokeh_is_loading--;\n",
              "        if (root._bokeh_is_loading === 0) {\n",
              "          console.log(\"Bokeh: all BokehJS libraries loaded\");\n",
              "          run_callbacks()\n",
              "        }\n",
              "      };\n",
              "      s.onerror = function() {\n",
              "        console.warn(\"failed to load library \" + url);\n",
              "      };\n",
              "      console.log(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
              "      document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
              "    }\n",
              "  };var element = document.getElementById(\"1001\");\n",
              "  if (element == null) {\n",
              "    console.log(\"Bokeh: ERROR: autoload.js configured with elementid '1001' but no matching script tag was found. \")\n",
              "    return false;\n",
              "  }\n",
              "\n",
              "  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-1.0.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.0.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.0.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.0.4.min.js\"];\n",
              "\n",
              "  var inline_js = [\n",
              "    function(Bokeh) {\n",
              "      Bokeh.set_log_level(\"info\");\n",
              "    },\n",
              "    \n",
              "    function(Bokeh) {\n",
              "      \n",
              "    },\n",
              "    function(Bokeh) {\n",
              "      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-1.0.4.min.css\");\n",
              "      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-1.0.4.min.css\");\n",
              "      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.0.4.min.css\");\n",
              "      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.0.4.min.css\");\n",
              "      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-tables-1.0.4.min.css\");\n",
              "      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.0.4.min.css\");\n",
              "    }\n",
              "  ];\n",
              "\n",
              "  function run_inline_js() {\n",
              "    \n",
              "    if ((root.Bokeh !== undefined) || (force === true)) {\n",
              "      for (var i = 0; i < inline_js.length; i++) {\n",
              "        inline_js[i].call(root, root.Bokeh);\n",
              "      }if (force === true) {\n",
              "        display_loaded();\n",
              "      }} else if (Date.now() < root._bokeh_timeout) {\n",
              "      setTimeout(run_inline_js, 100);\n",
              "    } else if (!root._bokeh_failed_load) {\n",
              "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
              "      root._bokeh_failed_load = true;\n",
              "    } else if (force !== true) {\n",
              "      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n",
              "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
              "    }\n",
              "\n",
              "  }\n",
              "\n",
              "  if (root._bokeh_is_loading === 0) {\n",
              "    console.log(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
              "    run_inline_js();\n",
              "  } else {\n",
              "    load_libs(js_urls, function() {\n",
              "      console.log(\"Bokeh: BokehJS plotting callback run at\", now());\n",
              "      run_inline_js();\n",
              "    });\n",
              "  }\n",
              "}(window));"
            ],
            "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof (root._bokeh_onload_callbacks) === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1001\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) { callback() });\n    }\n    finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.info(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(js_urls, callback) {\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.log(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.log(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = js_urls.length;\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var s = document.createElement('script');\n      s.src = url;\n      s.async = false;\n      s.onreadystatechange = s.onload = function() {\n        root._bokeh_is_loading--;\n        if (root._bokeh_is_loading === 0) {\n          console.log(\"Bokeh: all BokehJS libraries loaded\");\n          run_callbacks()\n        }\n      };\n      s.onerror = function() {\n        console.warn(\"failed to load library \" + url);\n      };\n      console.log(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.getElementsByTagName(\"head\")[0].appendChild(s);\n    }\n  };var element = document.getElementById(\"1001\");\n  if (element == null) {\n    console.log(\"Bokeh: ERROR: autoload.js configured with elementid '1001' but no matching script tag was found. \")\n    return false;\n  }\n\n  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-1.0.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.0.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.0.4.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.0.4.min.js\"];\n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    \n    function(Bokeh) {\n      \n    },\n    function(Bokeh) {\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-1.0.4.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-1.0.4.min.css\");\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.0.4.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.0.4.min.css\");\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-tables-1.0.4.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.0.4.min.css\");\n    }\n  ];\n\n  function run_inline_js() {\n    \n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (var i = 0; i < inline_js.length; i++) {\n        inline_js[i].call(root, root.Bokeh);\n      }if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.log(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(js_urls, function() {\n      console.log(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-2d874bda073d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m ])\n\u001b[1;32m     17\u001b[0m \u001b[0mpalette\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0md3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Category10'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'region'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mmapper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCategoricalColorMapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfactors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'region'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;31m# create figure and plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m p = figure(plot_width=600, plot_height=600, \n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/models/mappers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCategoricalColorMapper\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    134\u001b[0m         \u001b[0mpalette\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpalette\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m         \u001b[0mfactors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfactors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/models/mappers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, palette, **kwargs)\u001b[0m\n\u001b[1;32m     81\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpalette\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'palette'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 83\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mColorMapper\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0mabstract\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/model.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    259\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_document\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    260\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_temp_document\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 261\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mModel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    262\u001b[0m         \u001b[0mdefault_theme\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_to_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    263\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/core/has_props.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, **properties)\u001b[0m\n\u001b[1;32m    251\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    252\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mproperties\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 253\u001b[0;31m             \u001b[0msetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    254\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/core/has_props.py\u001b[0m in \u001b[0;36m__setattr__\u001b[0;34m(self, name, value)\u001b[0m\n\u001b[1;32m    278\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    279\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdescriptor\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdescriptor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfset\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m             \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mHasProps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m             \u001b[0mmatches\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdifflib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_close_matches\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"similar\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/core/property/descriptors.py\u001b[0m in \u001b[0;36m__set__\u001b[0;34m(self, obj, value, setter)\u001b[0m\n\u001b[1;32m    543\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"%s.%s is a readonly property\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 545\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_internal_set\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msetter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msetter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    546\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    547\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__delete__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/core/property/descriptors.py\u001b[0m in \u001b[0;36m_internal_set\u001b[0;34m(self, obj, value, hint, setter)\u001b[0m\n\u001b[1;32m    764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    765\u001b[0m         '''\n\u001b[0;32m--> 766\u001b[0;31m         \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    767\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    768\u001b[0m         \u001b[0mold\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/core/property/bases.py\u001b[0m in \u001b[0;36mprepare_value\u001b[0;34m(self, obj_or_cls, name, value)\u001b[0m\n\u001b[1;32m    325\u001b[0m                     \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 327\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    328\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    329\u001b[0m             \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/core/property/bases.py\u001b[0m in \u001b[0;36mprepare_value\u001b[0;34m(self, obj_or_cls, name, value)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mvalidation_on\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 320\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalidate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    321\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    322\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mtp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconverter\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0malternatives\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bokeh/core/property/either.py\u001b[0m in \u001b[0;36mvalidate\u001b[0;34m(self, value, detail)\u001b[0m\n\u001b[1;32m    114\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_valid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdetail\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"expected an element of either %s, got %r\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnice_join\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m     \u001b[0;31m# TODO (bev) implement this\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: expected an element of either Seq(String), Seq(Tuple(String, String)) or Seq(Tuple(String, String, String)), got array(['Asia', 'Europe', 'Africa', nan, 'Americas', 'Oceania'],\n      dtype=object)"
          ]
        }
      ]
    }
  ]
}